/*
MAVLink protocol implementation for node.js (auto-generated by mavgen_javascript.py)

Generated from: ReferCom.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

jspack = require("jspack").jspack,
    _ = require("underscore"),
    events = require("events"),
    util = require("util");

// Add a convenience method to Buffer
Buffer.prototype.toByteArray = function () {
  return Array.prototype.slice.call(this, 0)
}

mavlink20 = function(){};

// Implement the CRC-16/MCRF4XX function (present in the Python version through the mavutil.py package)
mavlink20.x25Crc = function(buffer, crcIN) {

    var bytes = buffer;
    var crcOUT = crcIN || 0xffff;
    _.each(bytes, function(e) {
        var tmp = e ^ (crcOUT & 0xff);
        tmp = (tmp ^ (tmp << 4)) & 0xff;
        crcOUT = (crcOUT >> 8) ^ (tmp << 8) ^ (tmp << 3) ^ (tmp >> 4);
        crcOUT = crcOUT & 0xffff;
    });
    return crcOUT;

}

mavlink20.WIRE_PROTOCOL_VERSION = "2.0";
mavlink20.HEADER_LEN = 10;

mavlink20.MAVLINK_TYPE_CHAR     = 0
mavlink20.MAVLINK_TYPE_UINT8_T  = 1
mavlink20.MAVLINK_TYPE_INT8_T   = 2
mavlink20.MAVLINK_TYPE_UINT16_T = 3
mavlink20.MAVLINK_TYPE_INT16_T  = 4
mavlink20.MAVLINK_TYPE_UINT32_T = 5
mavlink20.MAVLINK_TYPE_INT32_T  = 6
mavlink20.MAVLINK_TYPE_UINT64_T = 7
mavlink20.MAVLINK_TYPE_INT64_T  = 8
mavlink20.MAVLINK_TYPE_FLOAT    = 9
mavlink20.MAVLINK_TYPE_DOUBLE   = 10

mavlink20.MAVLINK_IFLAG_SIGNED = 0x01

// Mavlink headers incorporate sequence, source system (platform) and source component. 
mavlink20.header = function(msgId, mlen, seq, srcSystem, srcComponent, incompat_flags=0, compat_flags=0,) {

    this.mlen = ( typeof mlen === 'undefined' ) ? 0 : mlen;
    this.seq = ( typeof seq === 'undefined' ) ? 0 : seq;
    this.srcSystem = ( typeof srcSystem === 'undefined' ) ? 0 : srcSystem;
    this.srcComponent = ( typeof srcComponent === 'undefined' ) ? 0 : srcComponent;
    this.msgId = msgId
    this.incompat_flags = incompat_flags
    this.compat_flags = compat_flags

}
mavlink20.header.prototype.pack = function() {
    return jspack.Pack('BBBBBBBHB', [253, this.mlen, this.incompat_flags, this.compat_flags, this.seq, this.srcSystem, this.srcComponent, ((this.msgId & 0xFF) << 8) | ((this.msgId >> 8) & 0xFF), this.msgId>>16]);
}
        
// Base class declaration: mavlink.message will be the parent class for each
// concrete implementation in mavlink.messages.
mavlink20.message = function() {};

// Convenience setter to facilitate turning the unpacked array of data into member properties
mavlink20.message.prototype.set = function(args) {
    _.each(this.fieldnames, function(e, i) {
        this[e] = args[i];
    }, this);
};

// This pack function builds the header and produces a complete MAVLink message,
// including header and message CRC.
mavlink20.message.prototype.pack = function(mav, crc_extra, payload) {

    this.payload = payload;
    var plen = this.payload.length;
        //in MAVLink2 we can strip trailing zeros off payloads. This allows for simple
        // variable length arrays and smaller packets
        while (plen > 1 && this.payload[plen-1] == 0) {
                plen = plen - 1;
        }
        this.payload = this.payload.slice(0, plen);
        var incompat_flags = 0;
    this.header = new mavlink20.header(this.id, this.payload.length, mav.seq, mav.srcSystem, mav.srcComponent, incompat_flags, 0,);    
    this.msgbuf = this.header.pack().concat(this.payload);
    var crc = mavlink20.x25Crc(this.msgbuf.slice(1));

    // For now, assume always using crc_extra = True.  TODO: check/fix this.
    crc = mavlink20.x25Crc([crc_extra], crc);
    this.msgbuf = this.msgbuf.concat(jspack.Pack('<H', [crc] ) );
    return this.msgbuf;

}


// enums

// REF_COMPONENT_ID
mavlink20.REF_COMPONENT_ID_SERVER = 0 // Referee server.
mavlink20.REF_COMPONENT_ID_X_FISHMONGER_A = 1 // Team X Fishmonger.
mavlink20.REF_COMPONENT_ID_X_FISHMONGER_B = 2 // Team Y Fishmonger.
mavlink20.REF_COMPONENT_ID_Y_FISHMONGER_A = 3 // Team X Fishmonger.
mavlink20.REF_COMPONENT_ID_Y_FISHMONGER_B = 4 // Team Y Fishmonger.
mavlink20.REF_COMPONENT_ID_FISHPOND = 5 // Fish pond.
mavlink20.REF_COMPONENT_ID_ENUM_END = 6 // 

// REF_ERROR_CODE
mavlink20.REF_ERROR_NONE = 0 // STOP State.
mavlink20.REF_ERROR_COMMUNICATION = 1 // Communication is error.
mavlink20.REF_ERROR_CV = 2 // Computer vision is error.
mavlink20.REF_ERROR_BATTERY = 3 // Battery is going to run out.
mavlink20.REF_ERROR_CODE_ENUM_END = 4 // 

// REF_FISHMONGER_STATE
mavlink20.REF_FISHMONGER_STATE_STOP = 0 // STOP State.
mavlink20.REF_FISHMONGER_STATE_SCANNING = 1 // Fishmonger is waiting for the fish.
mavlink20.REF_FISHMONGER_STATE_COOLING = 2 // Fishmonger is cooling.
mavlink20.REF_FISHMONGER_STATE_TRIGGERED = 3 // Fishmonger triggered by fish.
mavlink20.REF_FISHMONGER_STATE_ENUM_END = 4 // 

// REF_FISHPOND_STATE
mavlink20.REF_FISHPOND_STATE_STOP = 0 // STOP State.
mavlink20.REF_FISHPOND_STATE_NORMAL = 1 // Fish pond is normal and stable.
mavlink20.REF_FISHPOND_STATE_RELEASE = 2 // Fish pond will release a box of fish.
mavlink20.REF_FISHPOND_STATE_CLEAN = 3 // Fish pond will turn the table over.
mavlink20.REF_FISHPOND_STATE_ENUM_END = 4 // 

// REF_FISH_TYPE
mavlink20.REF_FISH_RED = 0 // Red fish.
mavlink20.REF_FISH_ORANGE = 1 // Orange fish.
mavlink20.REF_FISH_YELLOW = 2 // Yellow fish.
mavlink20.REF_FISH_GREEN = 3 // Green fish.
mavlink20.REF_FISH_BLUE = 4 // Blue fish.
mavlink20.REF_FISH_TYPE_ENUM_END = 5 // 

// message IDs
mavlink20.MAVLINK_MSG_ID_BAD_DATA = -1
mavlink20.MAVLINK_MSG_ID_SERVER_HEARTBEAT = 0
mavlink20.MAVLINK_MSG_ID_SET_CONPONENT_STATE = 2
mavlink20.MAVLINK_MSG_ID_COMPONENT_HEARTBEAT = 3
mavlink20.MAVLINK_MSG_ID_FISHMONGER_FIND_FISH = 4
mavlink20.messages = {};

/* 
Indicate referee server is alive.

                pack_count                : Indicate id of heartbeat. First pack is 0. (uint32_t)

*/
mavlink20.messages.server_heartbeat = function(pack_count) {

    this.format = '<I';
    this.id = mavlink20.MAVLINK_MSG_ID_SERVER_HEARTBEAT;
    this.order_map = [0];
    this.crc_extra = 36;
    this.name = 'SERVER_HEARTBEAT';

    this.fieldnames = ['pack_count'];


    this.set(arguments);

}
        mavlink20.messages.server_heartbeat.prototype = new mavlink20.message;
mavlink20.messages.server_heartbeat.prototype.pack = function(mav) {
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, jspack.Pack(this.format, [ this.pack_count]));
}

/* 
Set component state with a paramater.

                component                 : Indicate the component need to be set. (uint8_t)
                new_state                 : Indicate new state (uint8_t)
                parameter                 : Auxiliary parameters (uint8_t)

*/
mavlink20.messages.set_conponent_state = function(component, new_state, parameter) {

    this.format = '<BBB';
    this.id = mavlink20.MAVLINK_MSG_ID_SET_CONPONENT_STATE;
    this.order_map = [0, 1, 2];
    this.crc_extra = 217;
    this.name = 'SET_CONPONENT_STATE';

    this.fieldnames = ['component', 'new_state', 'parameter'];


    this.set(arguments);

}
        mavlink20.messages.set_conponent_state.prototype = new mavlink20.message;
mavlink20.messages.set_conponent_state.prototype.pack = function(mav) {
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, jspack.Pack(this.format, [ this.component, this.new_state, this.parameter]));
}

/* 
Indicate component is alive.

                state                     : Indicate the state of now. (uint8_t)
                error_code                : Indicate error code. (uint8_t)
                battery_voltage           : Indicate voltage of battery. (uint16_t)
                pack_count                : Indicate id of heartbeat. First pack is 0. (uint32_t)

*/
mavlink20.messages.component_heartbeat = function(state, error_code, battery_voltage, pack_count) {

    this.format = '<IHBB';
    this.id = mavlink20.MAVLINK_MSG_ID_COMPONENT_HEARTBEAT;
    this.order_map = [2, 3, 1, 0];
    this.crc_extra = 244;
    this.name = 'COMPONENT_HEARTBEAT';

    this.fieldnames = ['state', 'error_code', 'battery_voltage', 'pack_count'];


    this.set(arguments);

}
        mavlink20.messages.component_heartbeat.prototype = new mavlink20.message;
mavlink20.messages.component_heartbeat.prototype.pack = function(mav) {
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, jspack.Pack(this.format, [ this.pack_count, this.battery_voltage, this.state, this.error_code]));
}

/* 
Indicate fish man find a fish.

                component                 : Indicate which fishmonger. (uint8_t)
                fish_type                 : Indicate the type of the fish. (uint8_t)
                pack_count                : Indicate how many same packs have been sent since fishmonger is at TRIGGERED. First pack is 0. (uint16_t)

*/
mavlink20.messages.fishmonger_find_fish = function(component, fish_type, pack_count) {

    this.format = '<HBB';
    this.id = mavlink20.MAVLINK_MSG_ID_FISHMONGER_FIND_FISH;
    this.order_map = [1, 2, 0];
    this.crc_extra = 36;
    this.name = 'FISHMONGER_FIND_FISH';

    this.fieldnames = ['component', 'fish_type', 'pack_count'];


    this.set(arguments);

}
        mavlink20.messages.fishmonger_find_fish.prototype = new mavlink20.message;
mavlink20.messages.fishmonger_find_fish.prototype.pack = function(mav) {
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, jspack.Pack(this.format, [ this.pack_count, this.component, this.fish_type]));
}


mavlink20.map = {
        0: { format: '<I', type: mavlink20.messages.server_heartbeat, order_map: [0], crc_extra: 36 },
        2: { format: '<BBB', type: mavlink20.messages.set_conponent_state, order_map: [0, 1, 2], crc_extra: 217 },
        3: { format: '<IHBB', type: mavlink20.messages.component_heartbeat, order_map: [2, 3, 1, 0], crc_extra: 244 },
        4: { format: '<HBB', type: mavlink20.messages.fishmonger_find_fish, order_map: [1, 2, 0], crc_extra: 36 },
}


// Special mavlink message to capture malformed data packets for debugging
mavlink20.messages.bad_data = function(data, reason) {
    this.id = mavlink20.MAVLINK_MSG_ID_BAD_DATA;
    this.data = data;
    this.reason = reason;
    this.msgbuf = data;
}

/* MAVLink protocol handling class */
MAVLink20Processor = function(logger, srcSystem, srcComponent) {

    this.logger = logger;

    this.seq = 0;
    this.buf = new Buffer.from([]);
    this.bufInError = new Buffer.from([]);
   
    this.srcSystem = (typeof srcSystem === 'undefined') ? 0 : srcSystem;
    this.srcComponent =  (typeof srcComponent === 'undefined') ? 0 : srcComponent;

    this.have_prefix_error = false;

    // The first packet we expect is a valid header, 6 bytes.
    this.protocol_marker = 253;   
    this.expected_length = mavlink20.HEADER_LEN;
    this.little_endian = true;

    this.crc_extra = true;
    this.sort_fields = true;
    this.total_packets_sent = 0;
    this.total_bytes_sent = 0;
    this.total_packets_received = 0;
    this.total_bytes_received = 0;
    this.total_receive_errors = 0;
    this.startup_time = Date.now();
    
}

// Implements EventEmitter
util.inherits(MAVLink20Processor, events.EventEmitter);

// If the logger exists, this function will add a message to it.
// Assumes the logger is a winston object.
MAVLink20Processor.prototype.log = function(message) {
    if(this.logger) {
        this.logger.info(message);
    }
}

MAVLink20Processor.prototype.log = function(level, message) {
    if(this.logger) {
        this.logger.log(level, message);
    }
}

MAVLink20Processor.prototype.send = function(mavmsg) {
    buf = mavmsg.pack(this);
    this.file.write(buf);
    this.seq = (this.seq + 1) % 256;
    this.total_packets_sent +=1;
    this.total_bytes_sent += buf.length;
}

// return number of bytes needed for next parsing stage
MAVLink20Processor.prototype.bytes_needed = function() {
    ret = this.expected_length - this.buf.length;
    return ( ret <= 0 ) ? 1 : ret;
}

// add data to the local buffer
MAVLink20Processor.prototype.pushBuffer = function(data) {
    if(data) {
        this.buf = Buffer.concat([this.buf, data]);
        this.total_bytes_received += data.length;
    }
}

// Decode prefix.  Elides the prefix.
MAVLink20Processor.prototype.parsePrefix = function() {

    // Test for a message prefix.
    if( this.buf.length >= 1 && this.buf[0] != this.protocol_marker ) {

        // Strip the offending initial byte and throw an error.
        var badPrefix = this.buf[0];
        this.bufInError = this.buf.slice(0,1);
        this.buf = this.buf.slice(1);
        this.expected_length = mavlink20.HEADER_LEN;

        // TODO: enable subsequent prefix error suppression if robust_parsing is implemented
        //if(!this.have_prefix_error) {
        //    this.have_prefix_error = true;
            throw new Error("Bad prefix ("+badPrefix+")");
        //}

    }
    //else if( this.buf.length >= 1 && this.buf[0] == this.protocol_marker ) {
    //    this.have_prefix_error = false;
    //}

}

// Determine the length.  Leaves buffer untouched.
MAVLink20Processor.prototype.parseLength = function() {
    
    if( this.buf.length >= 2 ) {
        var unpacked = jspack.Unpack('BB', this.buf.slice(0, 2));
        this.expected_length = unpacked[1] + mavlink20.HEADER_LEN + 2 // length of message + header + CRC
    }

}

// input some data bytes, possibly returning a new message
MAVLink20Processor.prototype.parseChar = function(c) {

    var m = null;

    try {

        this.pushBuffer(c);
        this.parsePrefix();
        this.parseLength();
        m = this.parsePayload();

    } catch(e) {

        this.log('error', e.message);
        this.total_receive_errors += 1;
        m = new mavlink20.messages.bad_data(this.bufInError, e.message);
        this.bufInError = new Buffer.from([]);
        
    }

    if(null != m) {
        this.emit(m.name, m);
        this.emit('message', m);
    }

    return m;

}

MAVLink20Processor.prototype.parsePayload = function() {

    var m = null;

    // If we have enough bytes to try and read it, read it.
    if( this.expected_length >= 8 && this.buf.length >= this.expected_length ) {

        // Slice off the expected packet length, reset expectation to be to find a header.
        var mbuf = this.buf.slice(0, this.expected_length);
        // TODO: slicing off the buffer should depend on the error produced by the decode() function
        // - if a message we find a well formed message, cut-off the expected_length
        // - if the message is not well formed (correct prefix by accident), cut-off 1 char only
        this.buf = this.buf.slice(this.expected_length);
        this.expected_length = 6;

        // w.info("Attempting to parse packet, message candidate buffer is ["+mbuf.toByteArray()+"]");

        try {
            m = this.decode(mbuf);
            this.total_packets_received += 1;
        }
        catch(e) {
            // Set buffer in question and re-throw to generic error handling
            this.bufInError = mbuf;
            throw e;
        }
    }

    return m;

}

// input some data bytes, possibly returning an array of new messages
MAVLink20Processor.prototype.parseBuffer = function(s) {
    
    // Get a message, if one is available in the stream.
    var m = this.parseChar(s);

    // No messages available, bail.
    if ( null === m ) {
        return null;
    }
    
    // While more valid messages can be read from the existing buffer, add
    // them to the array of new messages and return them.
    var ret = [m];
    while(true) {
        m = this.parseChar();
        if ( null === m ) {
            // No more messages left.
            return ret;
        }
        ret.push(m);
    }

}

/* decode a buffer as a MAVLink message */
MAVLink20Processor.prototype.decode = function(msgbuf) {

    var magic, incompat_flags, compat_flags, mlen, seq, srcSystem, srcComponent, unpacked, msgId;

    // decode the header
    try {
        unpacked = jspack.Unpack('cBBBBBBHB', msgbuf.slice(0, 10));
        magic = unpacked[0];
        mlen = unpacked[1];
        incompat_flags = unpacked[2];
        compat_flags = unpacked[3];
        seq = unpacked[4];
        srcSystem = unpacked[5];
        srcComponent = unpacked[6];
        var msgIDlow = ((unpacked[7] & 0xFF) << 8) | ((unpacked[7] >> 8) & 0xFF);
        var msgIDhigh = unpacked[8];
        msgId = msgIDlow | (msgIDhigh<<16);
        }
    catch(e) {
        throw new Error('Unable to unpack MAVLink header: ' + e.message);
    }

    if (magic.charCodeAt(0) != this.protocol_marker) {
        throw new Error("Invalid MAVLink prefix ("+magic.charCodeAt(0)+")");
    }

    if( mlen != msgbuf.length - (mavlink20.HEADER_LEN + 2)) {
        throw new Error("Invalid MAVLink message length.  Got " + (msgbuf.length - (mavlink20.HEADER_LEN + 2)) + " expected " + mlen + ", msgId=" + msgId);
    }

    if( false === _.has(mavlink20.map, msgId) ) {
        throw new Error("Unknown MAVLink message ID (" + msgId + ")");
    }

    // decode the payload
    // refs: (fmt, type, order_map, crc_extra) = mavlink20.map[msgId]
    var decoder = mavlink20.map[msgId];

    // decode the checksum
    try {
        var receivedChecksum = jspack.Unpack('<H', msgbuf.slice(msgbuf.length - 2));
    } catch (e) {
        throw new Error("Unable to unpack MAVLink CRC: " + e.message);
    }

    var messageChecksum = mavlink20.x25Crc(msgbuf.slice(1, msgbuf.length - 2));

    // Assuming using crc_extra = True.  See the message.prototype.pack() function.
    messageChecksum = mavlink20.x25Crc([decoder.crc_extra], messageChecksum);
    
    if ( receivedChecksum != messageChecksum ) {
        throw new Error('invalid MAVLink CRC in msgID ' +msgId+ ', got 0x' + receivedChecksum + ' checksum, calculated payload checksum as 0x'+messageChecksum );
    }

    var paylen = jspack.CalcLength(decoder.format);
    var payload = msgbuf.slice(mavlink20.HEADER_LEN, msgbuf.length - 2);

    //put any truncated 0's back in
    if (paylen > payload.length) {
        payload =  Buffer.concat([payload, Buffer.alloc(paylen - payload.length)]);
    }
    // Decode the payload and reorder the fields to match the order map.
    try {
        var t = jspack.Unpack(decoder.format, payload);
    }
    catch (e) {
        throw new Error('Unable to unpack MAVLink payload type='+decoder.type+' format='+decoder.format+' payloadLength='+ payload +': '+ e.message);
    }

    // Need to check if the message contains arrays
    var args = {};
    const elementsInMsg = decoder.order_map.length;
    const actualElementsInMsg = JSON.parse(JSON.stringify(t)).length;

    if (elementsInMsg == actualElementsInMsg) {
        // Reorder the fields to match the order map
        _.each(t, function(e, i, l) {
            args[i] = t[decoder.order_map[i]]
        });
    } else {
        // This message contains arrays
        var typeIndex = 1;
        var orderIndex = 0;
        var memberIndex = 0;
        var tempArgs = {};

        // Walk through the fields 
        for(var i = 0, size = decoder.format.length-1; i <= size; ++i) {
            var order = decoder.order_map[orderIndex];
            var currentType =  decoder.format[typeIndex];

            if (isNaN(parseInt(currentType))) {
                // This field is not an array check the type and add it to the args
                tempArgs[orderIndex] = t[memberIndex];
                memberIndex++;
            } else {
                // This field is part of an array, need to find the length of the array
                var arraySize = ''
                var newArray = []
                while (!isNaN(decoder.format[typeIndex])) {
                    arraySize = arraySize + decoder.format[typeIndex];
                    typeIndex++;
                }

                // Now that we know how long the array is, create an array with the values
                for(var j = 0, size = parseInt(arraySize); j < size; ++j){
                    newArray.push(t[j+orderIndex]);
                    memberIndex++;
                }

                // Add the array to the args object
                arraySize = arraySize + decoder.format[typeIndex];
                currentType = arraySize;
                tempArgs[orderIndex] = newArray;
            }
            orderIndex++;
            typeIndex++;
        }

        // Finally reorder the fields to match the order map
        _.each(t, function(e, i, l) {
            args[i] = tempArgs[decoder.order_map[i]]
        });
    }

    // construct the message object
    try {
        var m = new decoder.type(args);
        m.set.call(m, args);
    }
    catch (e) {
        throw new Error('Unable to instantiate MAVLink message of type '+decoder.type+' : ' + e.message);
    }
    m.msgbuf = msgbuf;
    m.payload = payload
    m.crc = receivedChecksum;
    m.header = new mavlink20.header(msgId, mlen, seq, srcSystem, srcComponent, incompat_flags, compat_flags);
    this.log(m);
    return m;
}


// Expose this code as a module
module.exports = {mavlink20, MAVLink20Processor};

